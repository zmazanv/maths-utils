#!/usr/bin/env python

from typing import Callable


def riemann_sum(delta: float, func: Callable, *x_points: float) -> float:
    return delta * sum(func(i) for i in x_points)


num: int = int(eval(input("Enter number of points: ")))
delta: float = float(eval(input("Enter delta: ")))
points: list[float] = []

for i in range(num):
    points.append(float(eval(input(f"Enter point {i + 1}: "))))

# This is incredibly unsafe. Avoid this.
# Only I am using this and its a short-term solution, so I'm
# leaving it for now.
func: Callable = eval(f"lambda x: {input("Enter f(x): ")}")

print()
print(f"Delta: {delta}")
print(f"Number of Points: {num}")
print("Points:")
for i in points:
    print(f"\t- x = {i}")
print(f"Riemann Sum: {riemann_sum(delta, func, *points)}")
